---
import { Navbar } from "~/components/composites/navbar/Navbar";
import { Footer } from "~/components/composites/footer/Footer";

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body class="bg-primary-bg">
    <Navbar client:load />
    <slot />
    <Footer client:visible />
  </body>
</html>
<style is:global>
  :root {
    --accent: 136, 58, 234;
    --accent-light: 224, 204, 250;
    --accent-dark: 49, 10, 101;
    --accent-gradient: linear-gradient(
      45deg,
      rgb(var(--accent)),
      rgb(var(--accent-light)) 30%,
      white 60%
    );
  }
  html {
    scroll-behavior: smooth;
  }

  /* This applies to all scrollable elements */
  ::-webkit-scrollbar {
    width: 8px; /* Adjust scrollbar width */
    height: 8px; /* Adjust scrollbar height */
  }

  /* Track */
  ::-webkit-scrollbar-track {
    background: #0e100f; /* Track color */
    border-radius: 10px; /* Add rounded corners to the track */
  }

  /* Handle */
  ::-webkit-scrollbar-thumb {
    background: #a98aff; /* Handle color */
    border-radius: 12px; /* Add rounded corners to the handle */
  }

  /* Handle on hover */
  ::-webkit-scrollbar-thumb:hover {
    background: #a98aff; /* Change color of the handle on hover */
  }

  .autoShow {
    animation: autoAnimateShow both;
    animation-timeline: view(var(--viewEnd, 55%) var(--viewStart, 15%));
    animation-delay: var(--delay);
  }
  .autoShowRight {
    animation: autoAnimateShowRight both;
    animation-timeline: view(var(--viewEnd, 50%) var(--viewStart, 20%));
    animation-delay: var(--delay, 0s);
  }
  .autoShowRightWithoutTimeline {
    animation: autoAnimateShowRight 0.3s ease forwards;
    animation-delay: var(--delay, 0s);
  }

  /* This one doesn't use scale, just shows to the right, used in contact page */
  .autoShowRight2WithoutTimeline {
    animation: autoAnimateShowRight2 0.3s ease-in forwards;
    animation-delay: var(--delay, 0s);
  }

  .slider {
    position: absolute;
    width: 80px;
    height: 80px;
    top: 10%;
    left: 50%;
    transition: transform 0.6s ease;
    transform-style: preserve-3d;
    transform: perspective(1000px);
    animation: autoRotate 15s linear infinite;
  }

  .slider:hover {
    animation-play-state: paused;
  }

  @keyframes autoRotate {
    from {
      transform: perspective(1000px) rotateX(-8deg) rotateY(0deg);
    }
    to {
      transform: perspective(1000px) rotateX(-8deg) rotateY(360deg);
    }
  }

  .item {
    position: absolute;
    width: 120px;
    height: 120px;
    inset: 0 0 0 0;
    transform: rotateY(calc((var(--position)) * (360 / var(--quantity)) * 1deg))
      translateZ(var(--translateZ, 150px));
  }

  @keyframes ping {
    75%,
    to {
      transform: scale(2);
      opacity: 0;
    }
  }
  @keyframes autoAnimateShow {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes autoAnimateShowRight {
    from {
      opacity: 0;
      scale: 0.95;
      transform: translateX(-45px);
    }
    to {
      opacity: 1;
      scale: 1;
      transform: translateY(0);
    }
  }
  @keyframes autoAnimateShowRight2 {
    from {
      opacity: 0;
      transform: translateX(-25px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes animateScale {
    0% {
      opacity: 0;
      scale: 0.6;
    }
    90% {
      opacity: 1;
      scale: 1.05;
    }
    100% {
      opacity: 1;
      scale: 1;
    }
  }

  .tooltip {
    position: fixed;
    top: 0;
    left: 0;
    pointer-events: none;
    visibility: hidden;
  }
  .tooltip-content {
    animation: animateScale 0.3s ease-out both;
  }
  .animate-ping {
    animation: ping 1s cubic-bezier(0, 0, 0.2, 1) infinite;
  }
  .draw-animation {
    stroke-dasharray: 100;
    stroke-dashoffset: -100;
    animation: draw 0.6s forwards;
  }

  @keyframes draw {
    to {
      stroke-dashoffset: 0;
    }
  }
</style>
